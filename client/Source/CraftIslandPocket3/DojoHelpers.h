// Generated by dojo-bindgen on Sat, 3 May 2025 07:10:29 +0000. Do not modify this file manually.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "DojoModule.h"
#include "Account.h"
#include "DojoHelpers.generated.h"

UCLASS(BlueprintType)
class UDojoModel : public UObject
{
    GENERATED_BODY()

public:
    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FString DojoModelType;
};

    

// Model definition for `craft_island_pocket::models::common::GatherableResource` model
UCLASS(BlueprintType)
class UDojoModelCraftIslandPocketGatherableResource : public UDojoModel
{
    GENERATED_BODY()

public:
    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FString IslandId;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FString ChunkId;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    int Position;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    int ResourceId;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    int64 PlantedAt;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    int64 NextHarvestAt;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    int64 HarvestedAt;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    int MaxHarvest;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    int RemainedHarvest;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    bool Destroyed;
};



// Model definition for `craft_island_pocket::models::inventory::Inventory` model
UCLASS(BlueprintType)
class UDojoModelCraftIslandPocketInventory : public UDojoModel
{
    GENERATED_BODY()

public:
    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FString Owner;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    int Id;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    int InventoryType;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    int InventorySize;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FString Slots1;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FString Slots2;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FString Slots3;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FString Slots4;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    int SelectedSlot;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    int HotbarSelectedSlot;
};



// Model definition for `craft_island_pocket::models::common::IslandChunk` model
UCLASS(BlueprintType)
class UDojoModelCraftIslandPocketIslandChunk : public UDojoModel
{
    GENERATED_BODY()

public:
    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FString IslandId;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FString ChunkId;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    int Version;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FString Blocks1;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FString Blocks2;
};



// Model definition for `craft_island_pocket::models::common::PlayerData` model
UCLASS(BlueprintType)
class UDojoModelCraftIslandPocketPlayerData : public UDojoModel
{
    GENERATED_BODY()

public:
    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FString Player;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    int OnboardingStep;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    int Coins;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FString CurrentIsland;
};



// Model definition for `craft_island_pocket::models::common::PlayerStats` model
UCLASS(BlueprintType)
class UDojoModelCraftIslandPocketPlayerStats : public UDojoModel
{
    GENERATED_BODY()

public:
    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FString Player;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    int MinerLevel;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    int LumberjackLevel;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    int FarmerLevel;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    int MinerXp;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    int LumberjackXp;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    int FarmerXp;
};

UCLASS()
class ADojoHelpers : public AActor
{
    GENERATED_BODY()

private:
    ToriiClient *toriiClient;

    // To initialize using SetContractsAddresses
    TMap<FString, FString> ContractsAddresses;

    bool subscribed;

    struct Subscription *subscription;

    static ADojoHelpers* Instance;

    void ControllerAccountCallback(ControllerAccount *account);

    static void ControllerCallbackProxy(ControllerAccount *account);

    static void CallbackProxy(struct FieldElement key, struct CArrayStruct models);

    UDojoModel* parseCraftIslandPocketGatherableResourceModel(struct Struct* model);
    UDojoModel* parseCraftIslandPocketInventoryModel(struct Struct* model);
    UDojoModel* parseCraftIslandPocketIslandChunkModel(struct Struct* model);
    UDojoModel* parseCraftIslandPocketPlayerDataModel(struct Struct* model);
    UDojoModel* parseCraftIslandPocketPlayerStatsModel(struct Struct* model);

    void ParseModelsAndSend(struct CArrayStruct *models);

    void ExecuteFromOutside(const FControllerAccount& account,
                            const FString& to,
                            const FString& selector,
                            const FString& calldataParameter);

    void ExecuteRawDeprecated(const FAccount& account,
                              const FString& to,
                              const FString& selector,
                              const FString& calldataParameter);

public:
    ADojoHelpers();
    ~ADojoHelpers();

    ADojoHelpers* GetGlobalInstance();
    void SetGlobalInstance(ADojoHelpers* instance);

    UFUNCTION(BlueprintCallable)
    void Connect(const FString& torii_url, const FString& world);

    UFUNCTION(BlueprintCallable)
    void SetContractsAddresses(const TMap<FString,FString>& addresses);

    UFUNCTION(BlueprintCallable)
    void FetchExistingModels();

    UFUNCTION(BlueprintCallable)
    void SubscribeOnDojoModelUpdate();

    UFUNCTION(BlueprintCallable)
    FAccount CreateAccountDeprecated(const FString& rpc_url,
                                     const FString& address,
                                     const FString& private_key);

    UFUNCTION(BlueprintCallable)
    FAccount CreateBurnerDeprecated(const FString& rpc_url,
                                    const FString& address,
                                    const FString& private_key);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnDojoModelUpdated, UDojoModel*, Model);

    UPROPERTY(BlueprintAssignable)
    FOnDojoModelUpdated OnDojoModelUpdated;

    // CONTROLLER
    UFUNCTION(BlueprintCallable)
    void ControllerGetAccountOrConnect(const FString& rpc_url, const FString& chain_id);

    UFUNCTION(BlueprintCallable)
    void ControllerConnect(const FString& rpc_url);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnDojoControllerAccount,
                                                struct FControllerAccount,
                                                Account);

    UPROPERTY(BlueprintAssignable)
    FOnDojoControllerAccount FOnDojoControllerAccount;

    // CALLS
    
    UFUNCTION(BlueprintCallable, Category = "Calls")
    void CallCraftIslandPocketActionsSpawn(const FAccount& account);

    UFUNCTION(BlueprintCallable, Category = "Controller Calls")
    void CallControllerCraftIslandPocketActionsSpawn(const FControllerAccount& account);

    UFUNCTION(BlueprintCallable, Category = "Calls")
    void CallCraftIslandPocketActionsPlace(const FAccount& account, int64 x, int64 y, int64 z, int item_id);

    UFUNCTION(BlueprintCallable, Category = "Controller Calls")
    void CallControllerCraftIslandPocketActionsPlace(const FControllerAccount& account, int64 x, int64 y, int64 z, int item_id);

    UFUNCTION(BlueprintCallable, Category = "Calls")
    void CallCraftIslandPocketActionsHitBlock(const FAccount& account, int64 x, int64 y, int64 z, int hp);

    UFUNCTION(BlueprintCallable, Category = "Controller Calls")
    void CallControllerCraftIslandPocketActionsHitBlock(const FControllerAccount& account, int64 x, int64 y, int64 z, int hp);

    UFUNCTION(BlueprintCallable, Category = "Calls")
    void CallCraftIslandPocketActionsUseItem(const FAccount& account, int64 x, int64 y, int64 z);

    UFUNCTION(BlueprintCallable, Category = "Controller Calls")
    void CallControllerCraftIslandPocketActionsUseItem(const FControllerAccount& account, int64 x, int64 y, int64 z);

    UFUNCTION(BlueprintCallable, Category = "Calls")
    void CallCraftIslandPocketActionsSelectHotbarSlot(const FAccount& account, int slot);

    UFUNCTION(BlueprintCallable, Category = "Controller Calls")
    void CallControllerCraftIslandPocketActionsSelectHotbarSlot(const FControllerAccount& account, int slot);

    UFUNCTION(BlueprintCallable, Category = "Calls")
    void CallCraftIslandPocketActionsCraft(const FAccount& account, int item, int64 x, int64 y, int64 z);

    UFUNCTION(BlueprintCallable, Category = "Controller Calls")
    void CallControllerCraftIslandPocketActionsCraft(const FControllerAccount& account, int item, int64 x, int64 y, int64 z);

    UFUNCTION(BlueprintCallable, Category = "Calls")
    void CallCraftIslandPocketActionsInventoryMoveItem(const FAccount& account, int from_inventory, int from_slot, int to_inventory, int to_slot);

    UFUNCTION(BlueprintCallable, Category = "Controller Calls")
    void CallControllerCraftIslandPocketActionsInventoryMoveItem(const FControllerAccount& account, int from_inventory, int from_slot, int to_inventory, int to_slot);

};
